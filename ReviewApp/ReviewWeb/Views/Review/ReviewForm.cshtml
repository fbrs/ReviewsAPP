
@{
    ViewData["Title"] = "ReviewForm";
}

<h2>ReviewForm</h2>
<div class="row">
    <div class="col">
        <table class="table table-bordered">
            <tr><td>Project name: </td><td>@ViewBag.ReviewSetup.Setup.ProjectName</td></tr>
            <tr><td>Work product name: </td><td>@ViewBag.ReviewSetup.Setup.WorkProductName</td></tr>
            <tr>
                <td>Reviewers: </td>
                <td>
                    @foreach (var p in ViewBag.ReviewSetup.Participant)
                    {
                        @Html.Raw(@p.Firstname + " " + @p.Lastname + " (" + @p.Role + "),");
                        //@Html.Raw(p.Firstname);
                    }
                </td>
            </tr>
            <tbody id="CustomValue">
                @foreach (var a in ViewBag.ReviewSetup.HeadersRow)
                {

                    <tr>
                        <td>@a.Name</td>
                        @if (a.Fcn == null)
                        {
                            <td><input type="text"  class="form-control" value="@a.Data" data-count-id="@a.Id"/></td>
                        }
                        else
                        {
                            <td><span data-count-col="@a.ColumnName" data-count-val="@a.Parameter" data-count-id="@a.Id">@a.Data</span></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col">
        <div class="card float-right" style="width: 18rem;">
            <div class="card-body">
                <ul>
                    <li><button class="btn btn-primary" onclick="saveReviewProgress(@ViewBag.ReviewId)">Save</button></li>
                    <li><button class="btn btn-primary" onclick="saveReview()">Change</button></li>
                    <li><button class="btn btn-primary" onclick="saveReview()">Update</button></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div id="ReviewForm">
    @Html.Raw(@ViewBag.ReviewSetup.Setup.Html)
</div>
<script>
    var tbl;
    $(document).ready(function () {
        tbl = $('#Reviews').DataTable(
            {
                paging: false,
                "scrollX": true,
                "scrollY": 500,
                destroy: true,
                ordering: false,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });

        $('#Reviews').on('change keyup keydown paste cut', 'textarea', function () {
            $(this).height(0).height(this.scrollHeight);
        }).find('textarea').change();
    });


</script>
<script>
    function copyRow(index) {


        var html = index.parentNode.parentNode.cloneNode(true);
        html.deleteCell(0);
        var a = html.insertCell(0);
        a.appendChild(createRemoveButton());

        tbl.row.add(html).draw();//.draw();
        var currentPage = tbl.page();
        console.log(currentPage);
        var idx = index.parentNode.parentNode.rowIndex,
            rowCount = tbl.data().length - 1,
            insertedRow = tbl.row(rowCount).data(),
            tempRow;
        for (var i = rowCount; i > idx; i--) {
            console.log(idx);
            tempRow = tbl.row(i - 1).data();
            tbl.row(i).data(tempRow);
            tbl.row(i - 1).data(insertedRow);
        }
    }

    function change(index, name) {
        var table = document.getElementById('Reviews');
        var values = document.getElementById('CustomValue').getElementsByTagName('span');
        changeSelectedValue(index);
        console.log(values);
        var pos = index.parentNode.cellIndex;
        for (var i = 0; i < values.length; i++) {
            var col = values[i].getAttribute('data-count-col');
            if (col === name) {
                var count = 0;
                var countedValue = values[i].getAttribute('data-count-val');
                console.log(table.rows.length);
                for (var j = 1; j < table.rows.length; j++) {
                    var o = table.rows[j].cells[pos].getElementsByTagName('select');//.childNode;

                    if (o[0].options[o[0].selectedIndex].value === countedValue)
                        count++;
                    console.log(count);
                }
                values[i].innerHTML = count;
            }
        }
    }
    function removeRow(index) {
        var index = index.parentNode.parentNode;//.rowIndex;
        tbl.row(index).remove().draw();
    }

    function createRemoveButton() {
        var btn = document.createElement('button');
        btn.type = "button";
        btn.setAttribute('class', 'btn btn-outline-danger btn-sm');
        btn.setAttribute('onclick', 'removeRow(this)');
        var i = document.createElement('i');
        i.setAttribute('class', 'fas fa-eraser');
        btn.appendChild(i);
        var text = document.createTextNode('Remove');
        btn.appendChild(text);
        return btn;
    }
    function saveReviewProgress(id) {
        tbl.destroy();
        var html = document.getElementById('ReviewForm');
        changeTextAreas();
        var htmldata = document.createTextNode(html.innerHTML);
        console.log(htmldata);
        var headerData = createObjects();
        console.log(headerData);
        var data = JSON.stringify({ reviewId: id, Html: htmldata.data, HeaderDatas: headerData });
        console.log(data);
        $.ajax({
            type: 'POST',
            url: "http://localhost:49727/Review/SaveReviewProgress", 
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
            data: data,
            success: function (result) {
                if (result !== null) {
                    // document.getElementById("result").innerHTML = JSON.stringify(result);
                    //window.location.href = '/Review/GetReview?id=' + result;
                    alert("Progress was saved");
                } else {
                    //document.getElementById("result").innerHTML = "NULL";
                    alert("KO");

                }
            }
        });



        tbl = $('#Reviews').DataTable({ paging: false, "scrollX": true, destroy: true, ordering: false });
    }
    function createObjects() {
        var data = [];
        var spans = document.getElementById('CustomValue').getElementsByTagName('span');
        for (var i = 0; i < spans.length; i++) {
            var o = new Object();
            o.Data = spans[i].innerText;
            o.HeaderRowId = spans[i].getAttribute('data-count-id');
            data.push(o);
        }
        var inputs = document.getElementById('CustomValue').getElementsByTagName('input');
        for (var i = 0; i < inputs.length; i++) {
            var o = new Object();
            o.Data = inputs[i].value;
            o.HeaderRowId = inputs[i].getAttribute('data-count-id');
            data.push(o);
        }
        return data;
    }
    function changeSelectedValue(select) {
        for (var i = 0; i < select.options.length; i++) {
            select.options[i].removeAttribute("selected");
        }
        select.options[select.selectedIndex].setAttribute('selected', 'selected');
    }
    function changeTextAreas() {
        var textAreas = document.getElementById('Reviews').getElementsByTagName('textarea');
        for (var i = 0; i < textAreas.length; i++) {
            var text = textAreas[i].value;
            
            textAreas[i].innerText = text;
            
        }
    }
    
</script>